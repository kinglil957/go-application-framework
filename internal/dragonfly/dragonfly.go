// Code generated by typespec.io tooling. DO NOT EDIT.

package dragonfly

import ()

// Represent a URL string as described by https://url.spec.whatwg.org/
type url = string

// Error represents a Snyk error as defined by the Error Catalog.
//
// For a more complete specification of errors, see
// https://github.com/snyk/error-catalog
type Error struct {
	Title          string `json:"title"`
	Description    string `json:"description"`
	Status         string `json:"status"`
	Classification string `json:"classification"`
	ErrorCode      string `json:"errorCode"`
	Links          []url  `json:"links"`
	Namespace      string `json:"namespace"`
	Level          string `json:"level"`
}

// A logical UUID as defined by RFC 4122.
type uuid = string

type TestRule struct {
	Id   uuid   `json:"id"`
	Rule string `json:"rule"`
}

type TestConfig struct {
	Frequency string     `json:"frequency"`
	Rules     []TestRule `json:"rules"`
	VulnData  []string   `json:"vulnData"`
}

// Risk is a Snyk proprietary means of indicating the risk measurment/value associated with
// an issue/finding or an asset. It is based on both intrinsic factors to a
// vulnerability and environmental factors.
type Risk struct {
	Score   int   `json:"score"`
	Factors []any `json:"factors"`
}

type ConditionGroup struct {
	Type            string `json:"type"`
	LogicalOperator string `json:"logicalOperator"`
	Conditions      any    `json:"conditions"`
}

type Action struct {
	Type string `json:"type"`
}

type Policy struct {
	ConditionGroup ConditionGroup `json:"conditionGroup"`
	Action         Action         `json:"action"`
}

// A logical datetime as defined by RFC3339 section 5.6, always with millisecond precision at UTC.
type datetime = string

type ControlType = string

const (
	ControlTypeSCA  = ControlType("sca")
	ControlTypeSAST = ControlType("sast")
)

// A control is any kind of security component that was executed on an asset.
// e.g. SAST/SCA tools, see Controls column on AppRisk Inventory.
type Control struct {
	Type                ControlType     `json:"type"`
	Name                string          `json:"name"`
	LastSeen            datetime        `json:"lastSeen"`
	SeveritiesBreakdown *map[string]int `json:"severitiesBreakdown"`
	Link                *string         `json:"link"`
}

type Evidence struct {
	Type    string `json:"type"`
	Summary string `json:"summary"`
	Link    *struct {
		Text string `json:"text"`
		Url  string `json:"url"`
	} `json:"link"`
	Timestamp datetime    `json:"timestamp"`
	Evidences *[]Evidence `json:"evidences"`
}

type Fact struct {
	Id       uuid     `json:"id"`
	Type     string   `json:"type"`
	Value    any      `json:"value"`
	Evidence Evidence `json:"evidence"`
}

type Asset struct {
	Id           *string             `json:"id"`
	Type         string              `json:"type"`
	Name         string              `json:"name"`
	Risk         *Risk               `json:"risk"`
	Class        *string             `json:"class"`
	Tags         *[]string           `json:"tags"`
	Policies     *[]Policy           `json:"policies"`
	DiscoveredBy map[string]datetime `json:"discoveredBy"`
	RiskFactors  []any               `json:"riskFactors"`
	Controls     []Control           `json:"controls"`
	Facts        *[]Fact             `json:"facts"`
}

// A URI as defined by RFC 3986.
type uri = url

type ScanResult struct {
	Scanner string `json:"scanner"`
	Asset   Asset  `json:"asset"`
	Results uri    `json:"results"`
}

type contentaddr = uri

type SDLCStage = string

const (
	SDLCStageDev      = SDLCStage("dev")
	SDLCStagePRChecks = SDLCStage("prchecks")
	SDLCStageCICD     = SDLCStage("cicd")
)

type Session struct {
	Id         uuid        `json:"id"`
	Type       SDLCStage   `json:"type"`
	Workspaces []Workspace `json:"workspaces"`
}

type Workspace struct {
	Id      contentaddr `json:"id"`
	Asset   Asset       `json:"asset"`
	Session *Session    `json:"session"`
}

type FindingType = string

const (
	FindingTypeSCA  = FindingType("sca")
	FindingTypeSAST = FindingType("sast")
)

type IgnoreInfo struct {
	Last   *datetime `json:"last"`
	Expiry *datetime `json:"expiry"`
	Reason *string   `json:"reason"`
	Author *string   `json:"author"`
}

type Severity = string

const (
	Severityinfo     = Severity("info")
	Severitylow      = Severity("low")
	Severitymedium   = Severity("medium")
	Severityhigh     = Severity("high")
	Severitycritical = Severity("critical")
)

type FindingLocation struct {
	Id      int    `json:"id"`
	Message string `json:"message"`
}

type Finding struct {
	Id            uuid              `json:"id"`
	NaturalKey    string            `json:"naturalKey"`
	Delta         string            `json:"delta"`
	Type          FindingType       `json:"type"`
	ParentAsset   *Asset            `json:"parentAsset"`
	Asset         *Asset            `json:"asset"`
	RemovalReason *string           `json:"removalReason"`
	Ignored       *bool             `json:"ignored"`
	IgnoreInfo    *IgnoreInfo       `json:"ignoreInfo"`
	Severity      Severity          `json:"severity"`
	Locations     []FindingLocation `json:"locations"`
	Risk          *Risk             `json:"risk"`
}

type Outcome = string

const (
	Outcomepassed = Outcome("passed")
	Outcomefailed = Outcome("failed")
)

type Issue struct {
	State           string    `json:"state"`
	LastFindingId   uuid      `json:"lastFindingId"`
	Uri             uri       `json:"uri"`
	Ignored         *bool     `json:"ignored"`
	LastIgnored     *datetime `json:"lastIgnored"`
	IgnoreExpiry    *datetime `json:"ignoreExpiry"`
	IgnoreReason    *string   `json:"ignoreReason"`
	Severity        Severity  `json:"severity"`
	Coordinates     []string  `json:"coordinates"`
	Risk            *Risk     `json:"risk"`
	FirstIntroduced datetime  `json:"firstIntroduced"`
	LastIntroduced  datetime  `json:"lastIntroduced"`
	LastResolved    *datetime `json:"lastResolved"`
}

// A Test represents a request for one or more scans on a set of discovered assets.
//
// A test is progressively updated by separate steps in a test processing pipeline.
// After each step is applied, certain properties are defined in the resulting state.
//
// While these properties could be modeled as a series of distinct test types
// composed with extension and spreads, that approach tends to obfuscate what
// the completed state will look like. Propagating such a type hierarchy into
// subtypes (which properties are available at different states in Assets or
// Findings?) only further adds to the complexity of representing how and where
// and when parts of an incrementally enriched model are constructed.
//
// Instead, the model is defined in its goal-state, with decorators indicating
// where in the pipeline various attributes will be defined.
type Test struct {
	Id          uuid          `json:"id"`
	Type        string        `json:"type"`
	Errors      *[]Error      `json:"errors"`
	Config      *TestConfig   `json:"config"`
	ScanResults *[]ScanResult `json:"scanResults"`
	Assets      *[]Asset      `json:"assets"`
	Asset       Asset         `json:"asset"`
	Workspace   Workspace     `json:"workspace"`
	Session     *Session      `json:"session"`
	Findings    *[]Finding    `json:"findings"`
	Policies    *[]Policy     `json:"policies"`
	Outcome     *Outcome      `json:"outcome"`
	Issues      *[]Issue      `json:"issues"`
}

type VulnerabilityFact struct {
	Name  string `json:"name"`
	Value bool   `json:"value"`
}

type VulnerabilityInstanceFact struct {
	Name  string `json:"name"`
	Value bool   `json:"value"`
}

// TestState represents the current state of a Test.
//
// The test pipeline is being represented initially as a simple linear workflow,
// in which these states are ordinal: each state below follows the other.
//
// If/when the test pipeline needs to evolve beyond a linear workflow, this
// state type will need to become a directed acyclic graph (DAG). That DAG could
// be modeled here with additional decorators which define transitions between
// states, along with compile-time checks to prevent cycles in the graph.
//
// These states might also be enriched with information about the pipeline
// processing function events which effect transitions.
type TestState = string

const (
	TestStateDefined         = TestState("Defined")
	TestStatePrepared        = TestState("Prepared")
	TestStateScanned         = TestState("Scanned")
	TestStateNormalized      = TestState("Normalized")
	TestStateAssetEnriched   = TestState("AssetEnriched")
	TestStateRiskApplied     = TestState("RiskApplied")
	TestStatePoliciesApplied = TestState("PoliciesApplied")
	TestStateFindingsStored  = TestState("FindingsStored")
	TestStateCompleted       = TestState("Completed")
)

// A job processed by the Snyk reactive pipeline
type TestJob struct {
	Id           uuid      `json:"id"`
	Uri          uri       `json:"uri"`
	Type         string    `json:"type"`
	JobState     string    `json:"jobState"`
	Errors       *[]Error  `json:"errors"`
	CreatedAt    datetime  `json:"createdAt"`
	UpdatedAt    datetime  `json:"updatedAt"`
	Spec         Test      `json:"spec"`
	SpecState    TestState `json:"specState"`
	Entitlements []string  `json:"entitlements"`
	Project      *uuid     `json:"project"`
}

type DiscoveryResult struct {
	Asset []Asset `json:"asset"`
}

type Discovery struct {
	Id               uuid             `json:"id"`
	Url              url              `json:"url"`
	Session          *Session         `json:"session"`
	DiscoveryResults *DiscoveryResult `json:"discoveryResults"`
}

// DiscoveryState represents the current state of a Discovery.
//
// This is currently very simple, leaving room for more intermediate states.
type DiscoveryState = string

const (
	DiscoveryStateDefined   = DiscoveryState("Defined")
	DiscoveryStateCompleted = DiscoveryState("Completed")
)

// A job processed by the Snyk reactive pipeline
type DiscoveryJob struct {
	Id           uuid           `json:"id"`
	Uri          uri            `json:"uri"`
	Type         string         `json:"type"`
	JobState     string         `json:"jobState"`
	Errors       *[]Error       `json:"errors"`
	CreatedAt    datetime       `json:"createdAt"`
	UpdatedAt    datetime       `json:"updatedAt"`
	Spec         Discovery      `json:"spec"`
	SpecState    DiscoveryState `json:"specState"`
	Entitlements []string       `json:"entitlements"`
}

type ScmVendor = string

const (
	ScmVendorgithub               = ScmVendor("github")
	ScmVendorgithub_on_prem       = ScmVendor("github-on-prem")
	ScmVendorgitlab               = ScmVendor("gitlab")
	ScmVendorgitlab_on_prem       = ScmVendor("gitlab-on-prem")
	ScmVendorazure_devops         = ScmVendor("azure-devops")
	ScmVendorazure_devops_on_prem = ScmVendor("azure-devops-on-prem")
	ScmVendorbitbucket            = ScmVendor("bitbucket")
	ScmVendorbitbucket_on_prem    = ScmVendor("bitbucket-on-prem")
)

type Repository struct {
	Asset
	Type              string    `json:"type"`
	Url               string    `json:"url"`
	ViewableUrl       string    `json:"viewableUrl"`
	DefaultBranchName *string   `json:"defaultBranchName"`
	ScmId             *string   `json:"scmId"`
	ScmVendor         ScmVendor `json:"scmVendor"`
}

type Branch struct {
	Asset
	Type            string `json:"type"`
	ViewUrl         string `json:"viewUrl"`
	IsDefaultBranch *bool  `json:"isDefaultBranch"`
	HeadSHA         string `json:"headSHA"`
}

type ImageOrigin = string

const (
	ImageOrigindocker_hub          = ImageOrigin("docker-hub")
	ImageOriginacr                 = ImageOrigin("acr")
	ImageOriginecr                 = ImageOrigin("ecr")
	ImageOrigingcr                 = ImageOrigin("gcr")
	ImageOriginartifactory_cr      = ImageOrigin("artifactory-cr")
	ImageOriginharbor_cr           = ImageOrigin("harbor-cr")
	ImageOriginquay_cr             = ImageOrigin("quay-cr")
	ImageOrigingitlab_cr           = ImageOrigin("gitlab-cr")
	ImageOrigingoogle_artifactr_cr = ImageOrigin("google-artifactr-cr")
	ImageOrigindigitalocean_cr     = ImageOrigin("digitalocean-cr")
	ImageOrigingithub_cr           = ImageOrigin("github-cr")
	ImageOriginnexus_cr            = ImageOrigin("nexus-cr")
	ImageOriginkubernetes_monitor  = ImageOrigin("kubernetes-monitor")
)

type Image struct {
	Asset
	Type       string      `json:"type"`
	ImageId    string      `json:"imageId"`
	Repository string      `json:"repository"`
	Tag        string      `json:"tag"`
	Digest     string      `json:"digest"`
	Origin     ImageOrigin `json:"origin"`
	ImageTags  *[]string   `json:"imageTags"`
	Digests    *[]string   `json:"digests"`
}

type Dependecy struct {
	Purl     string   `json:"purl"`
	Name     string   `json:"name"`
	Version  string   `json:"version"`
	License  []string `json:"license"`
	Internal *bool    `json:"internal"`
}

type DependencyChain struct {
	Chain     []Dependecy `json:"chain"`
	Dev       bool        `json:"dev"`
	Ecosystem string      `json:"ecosystem"`
}

type Package struct {
	SourceCode
	Dependencies []DependencyChain `json:"dependencies"`
}

type SourceCode struct {
	Asset
	Directory string      `json:"directory"`
	Path      *string     `json:"path"`
	Branch    *Branch     `json:"branch"`
	Repo      *Repository `json:"repo"`
	Package   *Package    `json:"package"`
}

type AssetFactKey = string

const (
	AssetFactKeytag       = AssetFactKey("tag")
	AssetFactKeyclass     = AssetFactKey("class")
	AssetFactKeyfreshness = AssetFactKey("freshness")
)

type AssetFact struct {
	Fact
	Key AssetFactKey `json:"key"`
}

type FindingFactKey = string

const (
	FindingFactKeyseverity = FindingFactKey("severity")
	FindingFactKeycve      = FindingFactKey("cve")
	FindingFactKeycwe      = FindingFactKey("cwe")
)

type FindingFact struct {
	Fact
	Key FindingFactKey `json:"key"`
}

type TestFactKey = string

const ()

type TestFact struct {
	Fact
	Key TestFactKey `json:"key"`
}

type Actor struct {
	Email    string `json:"email"`
	FullName string `json:"fullName"`
}

type ManualEvidence struct {
	Evidence
	Actor         Actor   `json:"actor"`
	PreviousValue *string `json:"previousValue"`
}

type SystemEvidence struct {
	Evidence
}

type RuntimeEvidence struct {
	SystemEvidence
}

type PolicyEvidence struct {
	Evidence
	Policy struct {
		Id           string   `json:"id"`
		Name         string   `json:"name"`
		ModefiedBy   Actor    `json:"modefiedBy"`
		LastModified datetime `json:"lastModified"`
		Create       datetime `json:"create"`
	} `json:"policy"`
	PreviousValue *string `json:"previousValue"`
}

type FindingLocationSCA struct {
	FindingLocation
	Purl string `json:"purl"`
}

type FindingLocationSAST struct {
	FindingLocation
	Uri         string `json:"uri"`
	StartLine   int    `json:"startLine"`
	StartColumn int    `json:"startColumn"`
	EndLine     int    `json:"endLine"`
	EndColumn   int    `json:"endColumn"`
}

type BusinessCriticality = string

const (
	BusinessCriticalityHigh   = BusinessCriticality("High")
	BusinessCriticalityMedium = BusinessCriticality("Medium")
	BusinessCriticalityLow    = BusinessCriticality("Low")
)

type CVSSv3Vector = string

type EPSSValue = float32

type sha256 = []byte

type Operator struct {
	Type string `json:"type"`
}

type Condition struct {
	Type     string   `json:"type"`
	Context  string   `json:"context"`
	Key      any      `json:"key"`
	Operator Operator `json:"operator"`
	Value    any      `json:"value"`
}

type DateOperators = string

const (
	DateOperatorsis_within     = DateOperators("is_within")
	DateOperatorsis_not_within = DateOperators("is_not_within")
)

type DateInput struct {
	Start        datetime `json:"start"`
	End          datetime `json:"end"`
	Greater_than datetime `json:"greater_than"`
	Smaller_than datetime `json:"smaller_than"`
}

type DateOperator struct {
	Operator
	Type         string        `json:"type"`
	OperatorProp DateOperators `json:"operatorProp"`
	UserInput    DateInput     `json:"userInput"`
}

type BooleanOperators = string

const (
	BooleanOperatorsexists          = BooleanOperators("exists")
	BooleanOperatorsdoes_not_exists = BooleanOperators("does_not_exists")
)

type BooleanOperator struct {
	Operator
	Type         string           `json:"type"`
	OperatorProp BooleanOperators `json:"operatorProp"`
}

type StringArrayOperators = string

const (
	StringArrayOperatorsis_any_of     = StringArrayOperators("is_any_of")
	StringArrayOperatorsis_all_of     = StringArrayOperators("is_all_of")
	StringArrayOperatorsis_not_all_of = StringArrayOperators("is_not_all_of")
	StringArrayOperatorsis_not_any_of = StringArrayOperators("is_not_any_of")
)

type StringArrayOperator struct {
	Operator
	Type         string               `json:"type"`
	OperatorProp StringArrayOperators `json:"operatorProp"`
	UserInput    []string             `json:"userInput"`
}

type StringOperators = string

const (
	StringOperatorsis               = StringOperators("is")
	StringOperatorsis_not           = StringOperators("is_not")
	StringOperatorscontains         = StringOperators("contains")
	StringOperatorsdoes_not_contain = StringOperators("does_not_contain")
	StringOperatorsstarts_with      = StringOperators("starts_with")
	StringOperatorsends_with        = StringOperators("ends_with")
)

type StringOperator struct {
	Operator
	Type         string          `json:"type"`
	OperatorProp StringOperators `json:"operatorProp"`
	UserInput    string          `json:"userInput"`
}

type ArithmeticOperators = string

const (
	ArithmeticOperatorsequals       = ArithmeticOperators("equals")
	ArithmeticOperatorsnot_equals   = ArithmeticOperators("not_equals")
	ArithmeticOperatorsgreater_than = ArithmeticOperators("greater_than")
	ArithmeticOperatorssmaller_than = ArithmeticOperators("smaller_than")
)

type ArithmeticOperator struct {
	Operator
	Type         string              `json:"type"`
	OperatorProp ArithmeticOperators `json:"operatorProp"`
	UserInput    int                 `json:"userInput"`
}

type IgnoreAction struct {
	Action
	Type           string `json:"type"`
	ReasonCategory string `json:"reasonCategory"`
	Reason         string `json:"reason"`
}

type ChangeSeverityAction struct {
	Action
	Type     string   `json:"type"`
	Severity Severity `json:"severity"`
}

// Enables license policy consolidation.
// Prerequsite: licenses to be populated as "ignored" findings.
type CreateLicenseFindingAction struct {
	Action
	Type     string   `json:"type"`
	Severity Severity `json:"severity"`
}

type TestAction struct {
	Action
	Type    string  `json:"type"`
	Outcome Outcome `json:"outcome"`
	Reason  string  `json:"reason"`
}

type ConditionAssetsKey = string

const (
	ConditionAssetsKeyasset_name                 = ConditionAssetsKey("asset_name")
	ConditionAssetsKeyasset_type                 = ConditionAssetsKey("asset_type")
	ConditionAssetsKeyasset_assignee             = ConditionAssetsKey("asset_assignee")
	ConditionAssetsKeyasset_attribute            = ConditionAssetsKey("asset_attribute")
	ConditionAssetsKeyasset_class                = ConditionAssetsKey("asset_class")
	ConditionAssetsKeyasset_control_executed     = ConditionAssetsKey("asset_control_executed")
	ConditionAssetsKeyasset_coverage_gap         = ConditionAssetsKey("asset_coverage_gap")
	ConditionAssetsKeyasset_control_issues       = ConditionAssetsKey("asset_control_issues")
	ConditionAssetsKeyasset_defect_severity      = ConditionAssetsKey("asset_defect_severity")
	ConditionAssetsKeyasset_defect_source        = ConditionAssetsKey("asset_defect_source")
	ConditionAssetsKeyasset_developers           = ConditionAssetsKey("asset_developers")
	ConditionAssetsKeyasset_discovered           = ConditionAssetsKey("asset_discovered")
	ConditionAssetsKeyasset_http_method          = ConditionAssetsKey("asset_http_method")
	ConditionAssetsKeyasset_last_seen            = ConditionAssetsKey("asset_last_seen")
	ConditionAssetsKeyasset_open_task            = ConditionAssetsKey("asset_open_task")
	ConditionAssetsKeyasset_risk                 = ConditionAssetsKey("asset_risk")
	ConditionAssetsKeyasset_tags                 = ConditionAssetsKey("asset_tags")
	ConditionAssetsKeyasset_task_source          = ConditionAssetsKey("asset_task_source")
	ConditionAssetsKeyasset_source               = ConditionAssetsKey("asset_source")
	ConditionAssetsKeyasset_repository_freshness = ConditionAssetsKey("asset_repository_freshness")
	ConditionAssetsKeyasset_risk_factor          = ConditionAssetsKey("asset_risk_factor")
	ConditionAssetsKeyasset_locked_attributes    = ConditionAssetsKey("asset_locked_attributes")
	ConditionAssetsKeyasset_uid                  = ConditionAssetsKey("asset_uid")
	ConditionAssetsKeyasset_id                   = ConditionAssetsKey("asset_id")
	ConditionAssetsKeyasset_issue_severity       = ConditionAssetsKey("asset_issue_severity")
	ConditionAssetsKeyasset_issue_source         = ConditionAssetsKey("asset_issue_source")
	ConditionAssetsKeyasset_org_ctx_catalog_name = ConditionAssetsKey("asset_org_ctx_catalog_name")
	ConditionAssetsKeyasset_org_ctx_title        = ConditionAssetsKey("asset_org_ctx_title")
	ConditionAssetsKeyasset_org_ctx_category     = ConditionAssetsKey("asset_org_ctx_category")
	ConditionAssetsKeyasset_org_ctx_lifecycle    = ConditionAssetsKey("asset_org_ctx_lifecycle")
	ConditionAssetsKeyasset_org_ctx_owner        = ConditionAssetsKey("asset_org_ctx_owner")
	ConditionAssetsKeyasset_org_ctx_application  = ConditionAssetsKey("asset_org_ctx_application")
)

type ConditionFindingKey = string

const (
	ConditionFindingKeyseverity         = ConditionFindingKey("severity")
	ConditionFindingKeycve              = ConditionFindingKey("cve")
	ConditionFindingKeycwe              = ConditionFindingKey("cwe")
	ConditionFindingKeyexploit_maturity = ConditionFindingKey("exploit_maturity")
	ConditionFindingKeyfinding_id       = ConditionFindingKey("finding_id")
	ConditionFindingKeysnyk_id          = ConditionFindingKey("snyk_id")
	ConditionFindingKeyrule_id          = ConditionFindingKey("rule_id")
)

type ConditionTestKey = string

const (
	ConditionTestKeytotalSeverityCount_critical  = ConditionTestKey("totalSeverityCount:critical")
	ConditionTestKeytotalSeverityCount_high      = ConditionTestKey("totalSeverityCount:high")
	ConditionTestKeytotalSeverityCount_medium    = ConditionTestKey("totalSeverityCount:medium")
	ConditionTestKeytotalSeverityCount_low       = ConditionTestKey("totalSeverityCount:low")
	ConditionTestKeyorg_id                       = ConditionTestKey("org_id")
	ConditionTestKeyproject_business_criticality = ConditionTestKey("project_business_criticality")
	ConditionTestKeyproject_env                  = ConditionTestKey("project_env")
	ConditionTestKeyproject_lifecycle            = ConditionTestKey("project_lifecycle")
	ConditionTestKeyproject_tags                 = ConditionTestKey("project_tags")
)
