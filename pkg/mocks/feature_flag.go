// Code generated by MockGen. DO NOT EDIT.
// Source: feature_flag.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	workflow "github.com/snyk/go-application-framework/pkg/workflow"
)

// MockFeatureFlagChecker is a mock of FeatureFlagChecker interface.
type MockFeatureFlagChecker struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagCheckerMockRecorder
}

// MockFeatureFlagCheckerMockRecorder is the mock recorder for MockFeatureFlagChecker.
type MockFeatureFlagCheckerMockRecorder struct {
	mock *MockFeatureFlagChecker
}

// NewMockFeatureFlagChecker creates a new mock instance.
func NewMockFeatureFlagChecker(ctrl *gomock.Controller) *MockFeatureFlagChecker {
	mock := &MockFeatureFlagChecker{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagChecker) EXPECT() *MockFeatureFlagCheckerMockRecorder {
	return m.recorder
}

// GetFeatureFlag mocks base method.
func (m *MockFeatureFlagChecker) GetFeatureFlag(engine workflow.Engine, featureFlagName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureFlag", engine, featureFlagName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlag indicates an expected call of GetFeatureFlag.
func (mr *MockFeatureFlagCheckerMockRecorder) GetFeatureFlag(engine, featureFlagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlag", reflect.TypeOf((*MockFeatureFlagChecker)(nil).GetFeatureFlag), engine, featureFlagName)
}
